{"version":3,"sources":["components/LoginComp.js","App.js","serviceWorker.js","index.js"],"names":["Modal","setAppElement","LoginComp","useState","modalIsOpen","setModalIsOpen","windowWidth","setwindowWidth","useEffect","window","addEventListener","document","body","clientWidth","customStyles","content","height","width","top","left","right","bottom","marginRight","transform","backgroundColor","border","overlay","className","onClick","aria-hidden","isOpen","style","onRequestClose","type","placeholder","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0SAIAA,IAAMC,cAAc,SAoELC,MAlEf,WAAsB,IAAD,EACmBC,oBAAS,GAD5B,mBACZC,EADY,KACCC,EADD,OAEmBF,mBAAS,GAF5B,mBAEZG,EAFY,KAECC,EAFD,KAInBC,qBAAU,WACRC,OAAOC,iBAAiB,UAAU,WAChCH,EAAeI,SAASC,KAAKC,kBAE/B,IAEF,IAAMC,EAAe,CACnBC,QAAS,CACPC,OAAQ,QACRC,MAAO,QACPC,IAAK,MACLC,KAAM,MACNC,MAAO,OACPC,OAAQ,OACRC,YAAa,OACbC,UAAW,wBACXC,gBAAiB,oBACjBC,OAAQ,8BAEVC,QAAS,CACPF,gBAAiB,oBAQrB,OAJIlB,EAAc,MAChBQ,EAAaC,QAAQE,MAAQ,SAI7B,yBAAKU,UAAU,SACb,4BAAQC,QAAS,kBAAMvB,GAAe,KACpC,uBAAGsB,UAAU,gBAAgBE,cAAY,SAD3C,eAIA,kBAAC,IAAD,CACEC,OAAQ1B,EACR2B,MAAOjB,EACPkB,eAAgB,kBAAM3B,GAAe,KAErC,yBAAKsB,UAAU,aACb,4BAAQA,UAAU,QAAQC,QAAS,kBAAMvB,GAAe,KAAxD,KAGA,2BACEsB,UAAU,oBACVM,KAAK,OACLC,YAAY,wBAEd,2BACEP,UAAU,oBACVM,KAAK,OACLC,YAAY,wBAEd,4BAAQN,QAAS,kBAAMvB,GAAe,IAAQsB,UAAU,OAAxD,aCnDKQ,MARf,WACE,OACE,yBAAKR,UAAU,OACb,kBAAC,EAAD,QCKcS,QACW,cAA7B3B,OAAO4B,SAASC,UAEe,UAA7B7B,OAAO4B,SAASC,UAEhB7B,OAAO4B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF/B,SAASgC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5c96ed80.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport \"./LoginComp.css\";\r\n\r\nModal.setAppElement(\"#root\");\r\n\r\nfunction LoginComp() {\r\n  const [modalIsOpen, setModalIsOpen] = useState(false);\r\n  const [windowWidth, setwindowWidth] = useState(0);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", () => {\r\n      setwindowWidth(document.body.clientWidth);\r\n    });\r\n  },[]);\r\n\r\n  const customStyles = {\r\n    content: {\r\n      height: \"500px\",\r\n      width: \"520px\",\r\n      top: \"50%\",\r\n      left: \"50%\",\r\n      right: \"auto\",\r\n      bottom: \"auto\",\r\n      marginRight: \"-50%\",\r\n      transform: \"translate(-50%, -50%)\",\r\n      backgroundColor: \"rgb(26, 110, 131)\",\r\n      border: \" 2px solid rgb(12, 85, 98)\",\r\n    },\r\n    overlay: {\r\n      backgroundColor: \"rgba(0,0,0,0.5)\", // Fourth parameter is for opacity\r\n    },\r\n  };\r\n\r\n  if (windowWidth < 520) {\r\n    customStyles.content.width = \"300px\"; \r\n  }\r\n  \r\n  return (\r\n    <div className=\"login\">\r\n      <button onClick={() => setModalIsOpen(true)}>\r\n        <i className=\"fa fa-sign-in\" aria-hidden=\"true\"></i> login here\r\n      </button>\r\n\r\n      <Modal\r\n        isOpen={modalIsOpen}\r\n        style={customStyles}\r\n        onRequestClose={() => setModalIsOpen(false)}\r\n      >\r\n        <div className=\"openModal\">\r\n          <button className=\"close\" onClick={() => setModalIsOpen(false)}>\r\n            x\r\n          </button>\r\n          <input\r\n            className=\"form-control my-4\"\r\n            type=\"text\"\r\n            placeholder=\"Enter Your username\"\r\n          />\r\n          <input\r\n            className=\"form-control my-4\"\r\n            type=\"text\"\r\n            placeholder=\"Enter Your Password\"\r\n          />\r\n          <button onClick={() => setModalIsOpen(false)} className=\"btn\">\r\n            Login\r\n          </button>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoginComp;\r\n","import React from 'react';\nimport './App.css';\nimport LoginComp from './components/LoginComp';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <LoginComp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}